@import variables

=clearfix 
    &:after 
        content: ""
        display: table
        clear: both

=square($size)
    width: $size
    height: $size
    
    
// Respond above.
=screen($breakpoint) 

	// If the breakpoint exists in the map.
	@if map-has-key($breakpoints, $breakpoint) 

		// Get the breakpoint value.
		$breakpoint-value: map-get($breakpoints, $breakpoint)

		// Write the media query.
		@media (min-width: $breakpoint-value) 
			@content		

	// If the breakpoint doesn't exist in the map.
	@else
    
		// Log a warning.
		@warn 'Invalid breakpoint: #{$breakpoint}.'
	
=truncate($width)
    white-space: nowrap
    overflow: hidden
    text-overflow: ellipsis
    width: $width



////
/// @author Matthieu Aussaguel
/// @group sass-css3-mixins
////

/// Adds a browser prefix to the property
/// @param {*} $property Property
/// @param {*} $value Value

=css3-prefix($property, $value)
	-webkit-#{$property}: 	#{$value}
	-khtml-#{$property}: 	#{$value}
	-moz-#{$property}: 		#{$value}
	-ms-#{$property}: 		#{$value}
	-o-#{$property}: 		#{$value}
	#{$property}: 			#{$value}

/// Background Gradient
/// @param {Color} $startColor [#3C3C3C] - Start Color
/// @param {Color} $endColor [#999999] - End Color

=gradient($startColor: $white, $endColor: $blue)
	background-color: $endColor
	background-image: -webkit-gradient(linear, left top, left bottom, from($startColor), to($endColor))
	background-image: -webkit-linear-gradient(top, $startColor, $endColor)
	background-image: -moz-linear-gradient(top, $startColor, $endColor)
	background-image: -ms-linear-gradient(top, $startColor, $endColor)
	background-image: -o-linear-gradient(top, $startColor, $endColor)
	background-image: linear-gradient(top, $startColor, $endColor)
	filter: progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$startColor}', endColorStr='#{$endColor}')


/// Background Radial
/// @param {Color} $startColor [#3C3C3C] - Start Color
/// @param {Percentage} $startPos [0%] - Start position
/// @param {Color} $endColor [#999999] - End Color
/// @param {Percentage} $endPos [100%] - End position

=radial($startColor: $white, $startPos: 0%, $endColor: $black, $endPos: 100%)
	background: -moz-radial-gradient(center, ellipse cover, $startColor $startPos, $endColor $endPos)
	background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop($startPos, $startColor), color-stop($endPos, $endColor))
	background: -webkit-radial-gradient(center, ellipse cover, $startColor $startPos, $endColor $endPos)
	background: -o-radial-gradient(center, ellipse cover, $startColor $startPos, $endColor $endPos)
	background: -ms-radial-gradient(center, ellipse cover, $startColor $startPos, $endColor $endPos)
	background: radial-gradient(ellipse at center, $startColor $startPos, $endColor $endPos)

/// Background Size
/// @param {Size} $width [100%] - Width
/// @param {Size} $width [$width] - Height
/// @require {mixin} css3-prefix

=background-size($width: 100%, $height: $width)
	@if type-of($width) == "number" and $height != null
		+css3-prefix("background-size", $width $height)
	@else
		+css3-prefix("background-size", $width)

/// Background Color Opacity
/// @param {Color} $color [100%] - Color
/// @param {Double} $opacity [0.85] - Opacity

=opacity($color: $black, $opacity: 0.85)
	background: $color
	background: rgba($color, $opacity)

/// Border Radius
/// @param {Size} $radius [5px] - Radius
/// @require {mixin} css3-prefix

=radius($radius: 5px)
	+css3-prefix("border-radius", $radius)

/// Border Radius Separate
/// @param {Size} $topLeftRadius [5px] - Top Left
/// @param {Size} $topRightRadius [5px] - Top Right
/// @param {Size} $bottomLeftRadius [5px] - Bottom Left
/// @param {Size} $bottomRightRadius [5px] - Bottom Right

=radiuses($topLeftRadius: 5px, $topRightRadius: 5px, $bottomLeftRadius: 5px, $bottomRightRadius: 5px)
	-webkit-border-top-left-radius: 	$topLeftRadius
	-webkit-border-top-right-radius: 	$topRightRadius
	-webkit-border-bottom-right-radius: $bottomRightRadius
	-webkit-border-bottom-left-radius: 	$bottomLeftRadius
	-moz-border-radius-topleft: 		$topLeftRadius
	-moz-border-radius-topright: 		$topRightRadius
	-moz-border-radius-bottomright: 	$bottomRightRadius
	-moz-border-radius-bottomleft: 		$bottomLeftRadius
	border-top-left-radius: 			$topLeftRadius
	border-top-right-radius: 			$topRightRadius
	border-bottom-right-radius: 		$bottomRightRadius
	border-bottom-left-radius: 			$bottomLeftRadius

/// Box
/// @param {*} $orient [horizontal] - Orientation
/// @param {*} $pack [center] - Pack
/// @param {*} $align [center] - Align
/// @require {mixin} css3-prefix

=box($orient: horizontal, $pack: center, $align: center)
  display: -webkit-box
  display: -moz-box
  display: box
  +css3-prefix("box-orient", $orient)
  +css3-prefix("box-pack", $pack)
  +css3-prefix("box-align", $align)

/// Box RGBA
/// @param {Integer} $r [60] - Red
/// @param {Integer} $g [3] - Green
/// @param {Integer} $b [12] - Blue
/// @param {Double} $opacity [0.23] - Opacity
/// @param {Color} $color [#3C3C3C] - Color

=box-rgba($r: 60, $g: 3, $b: 12, $opacity: 0.23, $color: #3C3C3C)
	background-color: transparent
	background-color: rgba($r, $g, $b, $opacity)
	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$color}',endColorstr='#{$color}')
	zoom: 1

/// Box Shadow
/// @param {Size} $x [2px] - X
/// @param {Size} $y [2px] - Y
/// @param {Size} $blur [5px] - Blur
/// @param {Color} $color [rgba(0,0,0,.4)] - Color
/// @param {Boolean} $inset - Inset

=box-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0, 0, 0, 0.4), $inset: "")
	@if $inset != ""
		+css3-prefix("box-shadow", $inset $x $y $blur $color)
	@else
		+css3-prefix("box-shadow", $x $y $blur $color)

/// Box Sizing
/// @param {*} $type [border-box] - Type
/// @require {mixin} css3-prefix

=box-sizing($type: border-box)
	+css3-prefix("box-sizing", $type)

/// Columns
/// @param {Integer} $count [3] - Count
/// @param {Integer} $gap [10] - Gap
/// @require {mixin} css3-prefix

=columns($count: 3, $gap: 10)
	+css3-prefix("column-count", $count)
	+css3-prefix("column-gap", $gap)

/// Double Borders
/// @param {Color} $colorOne [#3C3C3C] - Color One
/// @param {Color} $colorTwo [#999999] - Color Two
/// @param {Size} $radius [0] - Radius
/// @require {mixin} css3-prefix
/// @require {mixin} border-radius

=double-borders($colorOne: #3C3C3C, $colorTwo: #999999, $radius: 0)
	border: 1px solid $colorOne
	+css3-prefix("box-shadow", 0 0 0 1px $colorTwo)
	+border-radius($radius)

/// Flex
/// @param {Integer} $value [1] - Value
/// @require {mixin} css3-prefix

=flex($value: 1)
	+css3-prefix("box-flex", $value)

/// Flip
/// @param {Double} $scaleX [-1] - ScaleX
/// @require {mixin} css3-prefix

=flip($scaleX: -1)
	+css3-prefix("transform", scaleX($scaleX))
	filter: FlipH
	-ms-filter: "FlipH"

/// Font Face
/// @param {Font} $fontFamily [myFont] - Font Family
/// @param {String} $eotFileSrc ['myFont.eot'] - Eot File Source
/// @param {String} $woffFileSrc ['myFont.woff'] - Woff File Source
/// @param {String} $ttfFileSrc ['myFont.ttf'] - Ttf File Source
/// @param {String} $svgFileSrc ['myFont.svg'] - Svg File Source

=font-face($fontFamily: myFont, $eotFileSrc: "myFont.eot", $woffFileSrc: "myFont.woff", $ttfFileSrc: "myFont.ttf", $svgFileSrc: "myFont.svg", $svgFontID: "#myFont")
	font-family: $fontFamily
	src: url($eotFileSrc) format("eot"), url($woffFileSrc) format("woff"), url($ttfFileSrc) format("truetype"), url($svgFileSrc + $svgFontID) format("svg")

/// Opacity
/// @param {Double} $opacity [0.5] - Opacity
/// @require {mixin} css3-prefix

=opacity($opacity: 0.5)
	$opacityMultiplied: $opacity * 100
	filter: alpha(opacity = $opacityMultiplied)
	-ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=" + $opacityMultiplied + ")"
	+css3-prefix("opacity", $opacity)

/// Outline Radius
/// @param {Size} $radius [5px] - Radius
/// @require {mixin} css3-prefix

=outline-radius($radius: 5px)
	+css3-prefix("outline-radius", $radius)

/// Resize
/// @param {*} $directoin [both] - Direction
/// @require {mixin} css3-prefix

=resize($direction: both)
	+css3-prefix("resize", $direction)

/// Rotate
//
// / CSS Matrix Rotation Calculator http://www.boogdesign.com/examples/transforms/matrix-calculator.html
// / @param {Double} $deg [0] - Degree
// / @param {Double} $m11 [0] - M11
// / @param {Double} $m12 [0] - M12
// / @param {Double} $m21 [0] - M21
// / @param {Double} $m22 [0] - M22
// / @require {mixin} css3-prefix

=rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0)
	+css3-prefix("transform", rotate($deg + deg))
	filter: progid:DXImageTransform.Microsoft.Matrix( M11=#{$m11}, M12=#{$m12}, M21=#{$m21}, M22=#{$m22}, sizingMethod='auto expand')
	zoom: 1

/// Text Shadow
/// @param {Size} $x [2px] - X
/// @param {Size} $y [2px] - Y
/// @param {Size} $blur [2px] - Blur
/// @param {Color} $color [rgba(0,0,0,.4)] - Color

=text-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0, 0, 0, 0.4))
	text-shadow: $x $y $blur $color

/// Transform
/// @param {List} $params - Params
/// @require {mixin} css3-prefix

=transform($params)
	+css3-prefix("transform", $params)

/// Transform-Origin
/// @param {List} $params - Params
/// @require {mixin} css3-prefix

=transform-origin($params)
	+css3-prefix("transform-origin", $params)

// Transform-Style
/// @param {List} $params - Params
/// @require {mixin} css3-prefix

=transform-style($style: preserve-3d)
	+css3-prefix("transform-style", $style)

/// Transition
/// @param {List} $properties - Properties
/// @require {mixin} css3-prefix

=transition($properties...)
	@if length($properties) >= 1
		+css3-prefix("transition", $properties)
	@else
		+css3-prefix("transition", "all 0.3s ease-in-out 0s")

/// Triple Borders
/// @param {Color} $colorOne [#3C3C3C] - Color One
/// @param {Color} $colorTwo [#999999] - Color Two
/// @param {Color} $colorThree [#000000] - Color Three
/// @param {Size} $radius [0] - Radius
/// @require {mixin} border-radius
/// @require {mixin} css3-prefix

=triple-borders($colorOne: #3C3C3C, $colorTwo: #999999, $colorThree: #000000, $radius: 0)
	border: 1px solid $colorOne
	+border-radius($radius)
	+css3-prefix("box-shadow", "0 0 0 1px #{$colorTwo}, 0 0 0 2px #{$colorThree}")

/// Keyframes
/// @param {*} $animation-name - Animation name
/// @content [Animation css]

=keyframes($animation-name)
	@-webkit-keyframes #{$animation-name}
		@content
  
	@-moz-keyframes #{$animation-name}
		@content
  
	@-ms-keyframes #{$animation-name}
		@content
  
	@-o-keyframes #{$animation-name}
		@content
  
	@keyframes #{$animation-name}
		@content

/// Animation
/// @param {*} $str - name duration timing-function delay iteration-count direction fill-mode play-state ([http://www.w3schools.com/cssref/css3_pr_animation.asp](http://www.w3schools.com/cssref/css3_pr_animation.asp))
/// @require {mixin} css3-prefix

=animation($str)
	+css3-prefix("animation", $str)
	
//// Centerer
//// Parent should position: relative
=centered
	position: absolute
	top: 50%
	left: 50%
	transform: translate(-50%, -50%)
  
//// Centering
//// Using = +centerer(true, false)
=centerer($horizontal: true, $vertical: true)
	position: absolute;
	@if ($horizontal and $vertical)
		top: 50%
		left: 50%
		transform: translate(-50%, -50%)
	@else if ($horizontal)
		left: 50%
		transform: translate(-50%, 0)
	@else if ($vertical)
		top: 50%
		transform: translate(0, -50%)
        
////============================================================================= container

//== Grid system
$grid-columns:              12 !default
$grid-gutter-width:         30px !default
$grid-float-breakpoint:     $breakpoint !default
$grid-float-breakpoint-max: ($grid-float-breakpoint - 1) !default

$container-tablet:          (720px + $grid-gutter-width) !default
$container-sm:              $container-tablet !default

$container-desktop:         (940px + $grid-gutter-width) !default

$container-md:              $container-desktop !default

$container-large-desktop:   (1140px + $grid-gutter-width) !default

$container-lg:              $container-large-desktop !default

=container-fixed($gutter: $grid-gutter-width)
    margin-right: auto
    margin-left: auto
    padding-left:  ($gutter / 2)
    padding-right: ($gutter / 2)
    +clearfix


// Creates a wrapper for a series of columns
=make-row($gutter: $grid-gutter-width)
    margin-left:  ($gutter / -2)
    margin-right: ($gutter / -2)
    +clearfix


// Generate the extra small columns
=make-xs-column($columns, $gutter: $grid-gutter-width)
    position: relative
    float: left
    width: percentage(($columns / $grid-columns))
    min-height: 1px
    padding-left:  ($gutter / 2)
    padding-right: ($gutter / 2)

=make-xs-column-offset($columns)
    margin-left: percentage(($columns / $grid-columns))

=make-xs-column-push($columns)
    left: percentage(($columns / $grid-columns))

=make-xs-column-pull($columns)
    right: percentage(($columns / $grid-columns))


// Generate the small columns
=make-sm-column($columns, $gutter: $grid-gutter-width)
    position: relative
    min-height: 1px
    padding-left:  ($gutter / 2)
    padding-right: ($gutter / 2)
  
    //@media (min-width: $tablet)
    +screen(sm)
        float: left
        width: percentage(($columns / $grid-columns))
    

=make-sm-column-offset($columns)
    @media (min-width: $tablet)
        margin-left: percentage(($columns / $grid-columns))
  

=make-sm-column-push($columns)
    @media (min-width: $tablet)
        left: percentage(($columns / $grid-columns))
  

=make-sm-column-pull($columns)
    @media (min-width: $tablet)
        right: percentage(($columns / $grid-columns))
  


// Generate the medium columns
=make-md-column($columns, $gutter: $grid-gutter-width)
    position: relative
    min-height: 1px
    padding-left:  ($gutter / 2)
    padding-right: ($gutter / 2)
  
    @media (min-width: $desktop)
        float: left
        width: percentage(($columns / $grid-columns))
  

=make-md-column-offset($columns)
    @media (min-width: $desktop)
        margin-left: percentage(($columns / $grid-columns))
  

=make-md-column-push($columns)
    @media (min-width: $desktop)
        left: percentage(($columns / $grid-columns))
  

=make-md-column-pull($columns)
    @media (min-width: $desktop)
        right: percentage(($columns / $grid-columns))
  


// Generate the large columns
=make-lg-column($columns, $gutter: $grid-gutter-width)
    position: relative
    min-height: 1px
    padding-left:  ($gutter / 2)
    padding-right: ($gutter / 2)
  
    @media (min-width: $large)
        float: left
        width: percentage(($columns / $grid-columns))
  

=make-lg-column-offset($columns)
    @media (min-width: $large)
      margin-left: percentage(($columns / $grid-columns))
  

=make-lg-column-push($columns)
    @media (min-width: $large)
        left: percentage(($columns / $grid-columns))
  

=make-lg-column-pull($columns)
    @media (min-width: $large)
        right: percentage(($columns / $grid-columns))
  

  
// RANDOM COLOR
=random-color($selector)
    #{$selector}: unquote("#{random(256) - 1}, #{random(256)-1}, #{random(256 - 1)}, #{random(100)/100})")
    
//@for $i from 1 to 10 
//    .bg-color-#{i} 
//        @include random-color('background-color')

  
  